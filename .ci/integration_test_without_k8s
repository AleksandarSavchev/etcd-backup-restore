#!/usr/bin/env bash
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -e

# For the test step concourse will set the following environment variables:
# SOURCE_PATH - path to component repository root directory.

if [[ -z "${SOURCE_PATH}" ]]; then
  export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"
else
  export SOURCE_PATH="$(readlink -f "${SOURCE_PATH}")"
fi

VCS="github.com"
ORGANIZATION="gardener"
PROJECT="etcd-backup-restore"
REPOSITORY=${VCS}/${ORGANIZATION}/${PROJECT}
LOCATION="eu-central-1"

# The `go <cmd>` commands requires to see the target repository to be part of a
# Go workspace. Thus, if we are not yet in a Go workspace, let's create one
# temporarily by using symbolic links.
if [[ "${SOURCE_PATH}" != *"src/${REPOSITORY}" ]]; then
  SOURCE_SYMLINK_PATH="${SOURCE_PATH}/tmp/src/${REPOSITORY}"
  if [[ -d "${SOURCE_PATH}/tmp" ]]; then
    rm -rf "${SOURCE_PATH}/tmp"
  fi
  mkdir -p "${SOURCE_PATH}/tmp/src/${VCS}/${ORGANIZATION}"
  ln -s "${SOURCE_PATH}" "${SOURCE_SYMLINK_PATH}"
  cd "${SOURCE_SYMLINK_PATH}"

  export GOPATH="${SOURCE_PATH}/tmp"
  export GOBIN="${SOURCE_PATH}/tmp/bin"
  export PATH="${GOBIN}:${PATH}"
fi

##############################################################################

# Declare global variables
NAMESPACE=
ETCD_VER=
ETCD_DATA_DIR=

function setup_test_enviornment() {
    echo "Downloading and installing kubectl..."
    curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    mv ./kubectl /usr/local/bin/kubectl
    echo "Successfully installed kubectl."

    echo "Downloading and installing etcd..."
    export ETCD_VER=v3.3.5
    curl -L https://storage.googleapis.com/etcd/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz
    tar xzvf etcd-${ETCD_VER}-linux-amd64.tar.gz 
    chmod +x ./etcd-${ETCD_VER}-linux-amd64/etcd
    chmod +x ./etcd-${ETCD_VER}-linux-amd64/etcdctl
    mv ./etcd-${ETCD_VER}-linux-amd64/etcdctl /usr/local/bin/etcdctl 
    mv ./etcd-${ETCD_VER}-linux-amd64/etcd /usr/local/bin/etcd 
    rm -f ./etcd-${ETCD_VER}-linux-amd64
    rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
    echo "Successfully installed etcd."

    echo "Installing etcdbrctl."
    LOCAL_BUILD=1 .ci/build
    chmod +x bin/etcdbrctl
    mv ./bin/etcdbrctl /usr/local/bin/etcdbrctl
    echo "Successfully installed etcdbrctl."

    echo "Installing awscli"
    apt update && apt install python-pip
    pip install awscli
    echo "Successfully installed awscli"
}

function get_commit_id() {
  git_branch=`cat .git/HEAD| cut -f 2 -d ' '`
  NAMESPACE=commit`cat .git/$git_branch | cut -f 1 -d ' '`
}

#############################
#        AWS Setup          #
#############################

function create_aws_secret() {
  echo "Fetching aws credentials from secret server..."
  ACCESS_KEY_ID=`/cc/utils/cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key aws_access_key_id`
  SECRET_ACCESS_KEY=`/cc/utils/cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key aws_secret_access_key`
  REGION=`/cc/utils/cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key region`
  echo "Successfully fetched aws credentials from secret server."
  
  echo "Creating aws credentials for API access."
  mkdir $HOME/.aws
  cat << EOF > $HOME/.aws/credentials
[default]
aws_access_key_id = $ACCESS_KEY_ID
aws_secret_access_key = $SECRET_ACCESS_KEY
EOF
cat << EOF > $HOME/.aws/config
[default]
region = $REGION
EOF
  echo "Successfully created aws credentials."
}

function delete_aws_secret() {
  rm -rf $HOME/.aws
}

function create_etcd_data_directory() {
  #ETCD_DATA_DIR='/tmp/$NAMESPACE/etcd-data'
  # For local testng
  ETCD_DATA_DIR='$PWD/etcd-data'
  mkdir -p $ETCD_DATA_DIR
}

function create_s3_bucket(){
    aws s3api create-bucket --bucket $NAMESPACE --region $LOCATION --create-bucket-configuration LocationConstraint=$LOCATION
}

function setup-aws-infrastructure() {
  create_aws_secret
  create_s3_bucket
  create_etcd_data_directory
}

#############################
#        Azure Setup        #
#############################
function create_azure_secret() {
  echo "Creating Azure secret"  
}

#############################
#        GCP Setup          #
#############################
function create_gcp_secret() {
echo "Creating GCP secret" 
}

#############################
#        Openstack Setup    #
#############################
function create_openstack_secret() {
echo "Creating Openstack secret" 
}

##############################################################################
function setup_test_cluster() {
  # create namespace unique to commit
  echo "Creating namespace specific for current test..."
  get_commit_id
  # setup secrets
  setup-aws-infrastructure
  create_gcp_secret
  create_azure_secret
  create_openstack_secret
  #test_aws_integration

}

function delete_test_cluster(){
}

###############################################################################

# Get kubeconfig from secret server
setup_test_enviornment
echo "Setting up test cluster..."
setup_test_cluster

echo "Start integration tests."
cd ${SOURCE_SYMLINK_PATH}/tests/e2e/integration; ginkgo test
echo "Done with integration tests"

echo "Deleting test enviornment..."
delete_test_cluster
echo "Successfully completed all tests. Cheers!!."