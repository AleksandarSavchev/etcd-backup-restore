#!/usr/bin/env bash
set -e

TESTRUN_CHART=""
FLAVOR_TESTRUN_CHART=""
FLAVOR_CONFIG="min-shoot-flavor.yaml"
TM_LANDSCAPE="external"
LANDSCAPE=""
ARGUMENTS=""

function fetch_aws_secret() {
  echo "Fetching aws credentials from secret server..."
  export ACCESS_KEY_ID=`cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key access_key_id`
  export SECRET_ACCESS_KEY=`cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key secret_access_key`
  export SECRET_ACCESS_KEY_B64=`echo $SECRET_ACCESS_KEY | base64`
  export REGION=`cli.py config attribute --cfg-type aws --cfg-name etcd-backup-restore --key region`
  echo "Successfully fetched aws credentials from secret server."
}

for i in "$@"
do
echo $i
case $i in
        -tm-chart=*|--tm-chart=*)
        TESTRUN_CHART="${i#*=}"
        shift
    ;;
        -flavor-tm-chart=*|--flavor-tm-chart=*)
        FLAVOR_TESTRUN_CHART="${i#*=}"
        shift
    ;;
        -flavor-config=*|--flavor-config=*)
        FLAVOR_CONFIG="${i#*=}"
        shift
    ;;
        -tm-landscape=*|--tm-landscape=*)
        TM_LANDSCAPE="${i#*=}"
        shift
    ;;
        -landscape=*|--landscape=*)
        LANDSCAPE="${i#*=}"
        shift
    ;;
        --)
        ARGUMENTS="${@:2}"
        break
    ;;
    *)
        # unknown option
        echo "Unkown option ${i#*=}"
        exit 1
    ;;
esac
done

if [[ $TM_LANDSCAPE == "" ]]; then
    echo "Required paramter: -tm-landscape : external | internal"
    exit 1
fi
if [[ $LANDSCAPE == "" ]]; then
    echo "Required paramter: -landscape"
    exit 1
fi

if [[ $TM_LANDSCAPE == "internal" ]]; then
    TM_CONFIG_NAME=testmachinery-internal
fi
if [[ $TM_LANDSCAPE == "external" ]]; then
    TM_CONFIG_NAME=testmachinery
fi
if [[ $TM_LANDSCAPE == "staging" ]]; then
    TM_CONFIG_NAME=testmachinery-staging
fi

echo "Testmachinery config name: ${TM_CONFIG_NAME}"
echo "Testmachinery landscape: ${TM_LANDSCAPE}"
echo "Arguments: ${ARGUMENTS}"
echo "EFFECTIVE_VERSION: ${EFFECTIVE_VERSION}"

export GIT_REVISION="${EFFECTIVE_VERSION##*\-}" # split string by '-' and get last item
echo "GIT_REVISION: ${GIT_REVISION}"

fetch_aws_secret

export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"
mkdir -p /tm
TM_CLUSTER=/tm/kubeconfig
cli.py config attribute --cfg-type kubernetes --cfg-name $TM_CONFIG_NAME --key kubeconfig > $TM_CLUSTER

LANDSCAPE_REPO_PATH="$(readlink -f "${LANDSCAPE_REPO_PATH}")"
TESTRUNNER_GARDEN_CLUSTER="$LANDSCAPE_REPO_PATH/export/serviceaccounts/virtual-garden-kubeconfig-testrunner.yaml"

ACTIVE_GARDEN_CLUSTER=/tm/gardener.kubeconfig
kubectl --kubeconfig=$TESTRUNNER_GARDEN_CLUSTER config view --flatten -o json | jq '.users[].user = {"tokenFile": "/var/run/secrets/gardener/serviceaccount/dev-token"}' > $ACTIVE_GARDEN_CLUSTER

if [[ $TESTRUN_CHART != "" ]]; then
    TESTRUN_CHART_PATH="$SOURCE_PATH/testmachinery/testruns/$TESTRUN_CHART"
fi
if [[ $FLAVOR_TESTRUN_CHART != "" ]]; then
    FLAVOR_TESTRUN_CHART_PATH="$SOURCE_PATH/testmachinery/testruns/$FLAVOR_TESTRUN_CHART"
fi

export KUBECONFIG=$TM_CLUSTER
kubectl cluster-info

# timeout to 6h
/testrunner run \
    --gardener-kubeconfig-path=$ACTIVE_GARDEN_CLUSTER \
    --tm-kubeconfig-path=$TM_CLUSTER \
    --testrunner-kubeconfig-path=$TESTRUNNER_GARDEN_CLUSTER \
    --timeout=21600 \
    --interval=60 \
    --es-config-name=sap_internal \
    --landscape=$LANDSCAPE \
    --shoot-name="tm-" \
    --namespace="testruns-on-dev" \
    --testruns-chart-path=$TESTRUN_CHART_PATH \
    --flavored-testruns-chart-path=$FLAVOR_TESTRUN_CHART_PATH \
    --flavor-config=$SOURCE_PATH/testmachinery/flavors/$FLAVOR_CONFIG \
    --set=shoot.effectiveVersion=$EFFECTIVE_VERSION \
    --set=shoot.gitRevision=$GIT_REVISION \
    --set=etcdbr.aws.accessKeyId=$ACCESS_KEY_ID \
    --set=etcdbr.aws.secretAccessKey=$SECRET_ACCESS_KEY_B64 \
    --set=etcdbr.aws.region=$REGION \
    $ARGUMENTS
